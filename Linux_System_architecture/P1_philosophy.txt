Everything is a process; if it's not a process, it's a file
One tool to do one task
Three standard I/O channel
Combine tools seamlessly
Plain text preferred
CLI, not GUI
Modular, designed to be repurposed by others
Provide the mechanism, not the policy

Linux is a monolithic kernel



A file is an object on the
filesystem; beside regular file with plain text or binary content; it could also be a
directory, a symbolic link, a device-special file, a named pipe, or a (Unix-domain)
socket.

The kernel provides a layer to handle this very abstraction â€“ it's called the Virtual
Filesystem Switch (VFS). So, with this in place, the application developer can open a
device file and perform I/O (reads and writes) upon it, all using the usual API
interfaces provided (relax, these APIs will be covered in a subsequent chapter).
In fact, every process inherits three files on creation:
Standard input ( stdin : fd 0): The keyboard device, by default
Standard output ( stdout : fd 1): The monitor (or terminal) device, by
default
Standard error ( stderr : fd 2): The monitor (or terminal) device, by default